(*
# Misc
Miscellaneous methods and variables
*)

{$DEFINE SRL_MISC_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

const
  RS_ITEM_SHADOW       = $202030;

function RS_ITEM_BORDER: Int32;
begin
  if RSClient.Client = ERSClient.OFFICIAL then
    Result := 0
  else
    Result := $010000; 
end; 

function RS_ITEM_YELLOW_STACK: Int32;
begin
  if RSClient.Client = ERSClient.OFFICIAL then
    Result := 65278
  else
    Result := $00FFFF; 
end; 

function RS_ITEM_WHITE_STACK: Int32;
begin
  if RSClient.Client = ERSClient.OFFICIAL then
    Result := 16711422
  else
    Result := $FFFFFF; 
end; 

function RS_ITEM_GREEN_STACK: Int32;
begin
  if RSClient.Client = ERSClient.OFFICIAL then
    Result := 65280
  else
    Result := $80FF00;
end; 

(*
## SRL.GetXPAtLevel
```pascal
function TSRL.GetXPAtLevel(level:Int32): Int32;
```
Given a level it returns the minimum XP needed for it.
*)
function TSRL.GetXPAtLevel(level: Int32): Int32; constref;
var
  total:Double;
  i:Int32;
begin
  for i:=1 to level-1 do
    total += Floor(i + 300 * 2 ** (i / 7));
  Result := Floor(total / 4);
end;

(*
## SRL.GetLevelAtXP
```pascal
function TSRL.GetLevelAtXP(XP:UInt32): Int32;
```
Given some XP, it returns what level that is.
*)
function TSRL.GetLevelAtXP(XP: UInt32): Int32; constref;
var 
  total:Double;
begin
  while (total < XP*4+1) do
  begin  
    Inc(Result);
    total += Floor(Result + 300 * 2 ** (Result / 7));
  end;
end;

(*
## SRL.GetItemAmountBox
```pascal
function TSRL.GetItemAmountBox(constref area: TBox): TBox;
```
Returns the correct text box of an item's amount text based on the item box.
*)
function TSRL.GetItemAmountBox(constref area: TBox): TBox;
begin
  Result := area;
  Result.X2 := Result.X1 + 35;
  Result.Y2 := Result.Y1 + 7;
end;

(*
## SRL.GetItemAmount
```pascal
function TSRL.GetItemAmount(area: TBox): Int32;
```
For use with items in like bankscreen, inventory, shops and so on to
get the number of stacked items there are.
*)
function TSRL.GetItemAmount(constref area: TBox): Int32; constref;
begin
  if SRL.CountColor(RS_ITEM_YELLOW_STACK, area) > 0 then
    Result := OCR.RecognizeNumber(area, TOCRColorFilter.Create([RS_ITEM_YELLOW_STACK]), RS_FONT_PLAIN_11)
  else
  if SRL.CountColor(RS_ITEM_WHITE_STACK, area) > 0 then
    Result := OCR.RecognizeNumber(area, TOCRColorFilter.Create([RS_ITEM_WHITE_STACK]), RS_FONT_PLAIN_11) * 1000
  else
  if SRL.CountColor(RS_ITEM_GREEN_STACK, area) > 0 then
    Result := OCR.RecognizeNumber(area, TOCRColorFilter.Create([RS_ITEM_GREEN_STACK]), RS_FONT_PLAIN_11) * 1000000;
end;

(*
## SRL.AvgBrightness
```pascal
function TSRL.AvgBrightness(B: TBox): Int32;
```
Returns the average brightness of a area on the screen. 
Returns a value between ``0`` and ``100``, ``0`` being black.
*)
function TSRL.AvgBrightness(B: TBox): Int32; constref;
var
  BMP: TMufasaBitmap;
begin
  BMP.FromClient(B);
  Result := BMP.AvgBrightness();
  BMP.Free();
end;

(*
## SRL.PeakBrightness
```pascal
function TSRL.PeakBrightness(B: TBox): Int32;
```
Returns the peak brightness of a area on the screen. 
Returns a value between ``0`` and ``100``, ``0`` being black.
*)
function TSRL.PeakBrightness(B: TBox): Int32; constref;
var
  BMP: TMufasaBitmap;
begin
  BMP.FromClient(B);
  Result := BMP.PeakBrightness();
  BMP.Free();
end;

function TSRL.FormatNumber(n: Double; dec:Byte = 3): String; constref;
var
  i: Int32;
  f: Double := n;
begin
  while (Abs(f) >= 1000) do
  begin
    Inc(i);
    f := f / 1000;
  end;

  Result := FloatToStr(Round(f,dec)) + (['','K','M','B','T'])[i]
end;



